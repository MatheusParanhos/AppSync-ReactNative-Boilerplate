service: Boiler-appsync-serverless

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  role: arn:aws:iam::aws:policy/AdministratorAccess

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-appsync-plugin

custom:
  accountId: 321318863862  # replace this with your accountId
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:

          - table: Users
            sources: [seed-data/Users.json]
  webpackIncludeModules: true
  appSync:
    name:  Boiler # defaults to api
    # apiId # only required for update-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: us-west-2 # required # region
      defaultAction: ALLOW
      userPoolId: us-west-2_2QKwkY3gl # replace this with your Cognito User Pool Id
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      #users
      #query to dynamo that returns user info - ok
      - dataSource: myDynamoDB
        type: Query
        field: getUserInfo
        request: "getUserInfo-request-mapping-template.txt"
        response: "getUserInfo-response-mapping-template.txt"

      #profile query that returns user info - ok
      - dataSource: myDynamoDB
        type: Query
        field: meInfo 
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"

      #mutation that update user's profile info - ok
      - dataSource: myDynamoDB
        type: Mutation
        field: updateUserInfo
        request: "updateUserInfo-request-mapping-template.txt"
        response: "updateUserInfo-response-mapping-template.txt"

      #rides 
      #mutations


      - dataSource: myElasticSearch
        type: Mutation
        field: createRideOffer
        request: "createRideOffer-request-mapping-template.txt"
        response: "createRideOffer-response-mapping-template.txt"

      - dataSource: myElasticSearch
        type: Mutation
        field: createRideAsk
        request: "createRideAsk-request-mapping-template.txt"
        response: "createRideAsk-response-mapping-template.txt"



      - dataSource: myElasticSearch
        type: Mutation
        field: deleteRideOffer
        request: "deleteRideOffer-request-mapping-template.txt"
        response: "deleteRideOffer-response-mapping-template.txt"
      

      - dataSource: myElasticSearch
        type: Mutation
        field: deleteRideAsk
        request: "deleteRideAsk-request-mapping-template.txt"
        response: "deleteRideAsk-response-mapping-template.txt"

      

      - dataSource: myElasticSearch
        type: Mutation
        field: updateRideOffer
        request: "updateRideOffer-request-mapping-template.txt"
        response: "updateRideOffer-response-mapping-template.txt"


      - dataSource: myElasticSearch
        type: Mutation
        field: updateRideAsk
        request: "updateRideAsk-request-mapping-template.txt"
        response: "updateRideAsk-response-mapping-template.txt"

      #rides queries

      - dataSource: myElasticSearch
        type: Query
        field: searchAllRideOffersByKeyword
        request: "searchAllRideOffersByKeyword-request-mapping-template.txt"
        response: "searchAllRideOffersByKeyword-response-mapping-template.txt"


      - dataSource: myElasticSearch
        type: Query
        field: searchAllRideAsksByKeyword
        request: "searchAllRideAsksByKeyword-request-mapping-template.txt"
        response: "searchAllRideAsksByKeyword-response-mapping-template.txt"
      
      #locations

      #query from elastic search that return user's favorite locations                      DONE
      - dataSource: myElasticSearch
        type: User
        field: locations
        request: "locations-request-mapping-template.txt"
        response: "locations-response-mapping-template.txt"


    schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: myDynamoDB
        description: 'Users table'
        config:
          tableName: 'BoilerUsers'
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_ELASTICSEARCH
        name: myElasticSearch
        description: 'ElasticSearch'
        config:
          endpoint: https://myboilerelasticsearch.us-west-2.es.amazonaws.com # required # "https://{DOMAIN}.{REGION}.es.amazonaws.com"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/ElasticSearch-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: myLambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:us-west-2:${self:custom.accountId}:function:serverless-graphql-appsync-es-production-graphql"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}"
  
functions:
  graphql:
    handler: handler.graphqlHandler

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'ESUsers'
    AppSyncESServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "ElasticSearch-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "AppSyncESServiceRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "es:*"
                  Resource:
                    - "arn:aws:es:us-west-2:*:domain/appsync/*"
    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "AppSyncDynamoDBServiceRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:us-west-2:*:table/ESUsers"
                    - "arn:aws:dynamodb:us-west-2:*:table/ESUsers/*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-west-2:${self:custom.accountId}:function:myBoiler"
                    - "arn:aws:lambda:us-west-2:${self:custom.accountId}:function:myBoiler:*"
